import json
import random
from classes.unpaddedrsa import UnpaddedRSA
from classes.elgamal import ElGamal

def read_keys():
    rsa_path = './keys/rsa.json'
    elgamal_path = './keys/elgamal.json'

    # Read rsa_keys from JSON file
    with open(rsa_path, "r") as rsa_file:
        rsa_keys = json.load(rsa_file)

    # Read elgamal_keys from JSON file
    with open(elgamal_path, "r") as elgamal_file:
        elgamal_keys = json.load(elgamal_file)

    return rsa_keys, elgamal_keys

# Read keys generated by the generate_keys.py script
rsa_keys, elgamal_keys = read_keys()

# RSA and ElGamal execution
for key in rsa_keys:
    p = rsa_keys[key]['p']
    q = rsa_keys[key]['q']
    n = rsa_keys[key]['n']
    unpadded_rsa = UnpaddedRSA(p=p, q=q, n=n)

    # Generate random messages, same messages for RSA and ElGamal
    message1 = random.randint(1, n - 1)
    message2 = random.randint(1, n - 1)
    
    # Encrypt messages
    ciphertext1 = unpadded_rsa.encrypt(message1)
    ciphertext2 = unpadded_rsa.encrypt(message2)

    # Multiply the encrypted ciphertexts
    ciphertext3 = unpadded_rsa.multiply(ciphertext1, ciphertext2)
    verify_property = unpadded_rsa.verify_homomorphic_property(message1=message1, message2=message2, result=ciphertext3)
    if verify_property:
        print('RSA homomorphic property WORKED for key lenght ' + key)
    else:
        print('RSA homomorphic property DID NOT WORK for key lenght ' + key)

    # ElGamal execution
    p = elgamal_keys[key]['p']
    elgamal = ElGamal(p=p)

    # Encrypt messages
    ciphertext1 = elgamal.encrypt(message1)
    ciphertext2 = elgamal.encrypt(message2)

    # Multiply the encrypted ciphertexts
    ciphertext3 = elgamal.multiply(ciphertext1, ciphertext2)

    verify_property = elgamal.verify_homomorphic_property(message1=message1, message2=message2, result=ciphertext3)
    if verify_property:
        print('ElGamal homomorphic property WORKED for key lenght ' + key)
    else:
        print('ElGamal homomorphic property DID NOT WORK for key lenght ' + key)
